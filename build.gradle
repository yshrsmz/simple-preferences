// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "${project.rootDir}/gradle/version/version.gradle"
apply from: "${project.rootDir}/metadata.gradle"

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:2.1.2'
    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files

    classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    classpath 'com.novoda:bintray-release:0.3.4' // https://github.com/novoda/bintray-release
  }
}

allprojects {
  repositories {
    jcenter()
  }
}

ext {
  deps = [// Android
          android           : 'com.google.android:android:4.1.1.4',
          supportv4         : 'com.android.support:support-v4:23.2.1',
          appcompat         : 'com.android.support:appcompat-v7:23.2.1',
          supportAnnotations: 'com.android.support:support-annotations:23.2.1',

          rxJava            : 'io.reactivex:rxjava:1.2.1',

          // Square
          javapoet          : 'com.squareup:javapoet:1.7.0',

          // Test dependencies
          junit             : 'junit:junit:4.12',
          truth             : 'com.google.truth:truth:0.30',
          robolectric       : 'org.robolectric:robolectric:3.1.2',
          compiletesting    : 'com.google.testing.compile:compile-testing:0.9',
          autoservice       : 'com.google.auto.service:auto-service:1.0-rc2',
          autocommon        : 'com.google.auto:auto-common:0.6',
          commonsio         : 'commons-io:commons-io:2.4']

  metadata.version = ext.versionName()
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

String shell(String command) {
  def proc = ["sh", "-c", "cd ${project.rootDir} ; ${command}"].execute()
  if (proc.waitFor() != 0) {
    throw new RuntimeException("Failed to run: ${command}\n${proc.err.text}")
  } else {
    def err = proc.err.text
    if (err) {
      System.err.println(err)
    }
  }
  return proc.in.text;
}

task releng << {
  def tag = "v" + versionName()
  println "Release engineering for ${tag}"

  def changes = shell "git status -s"
  if (changes.trim()) {
    throw new RuntimeException("There are changes not commited yet.\n${changes}")
  }

  println "> git tag ${tag}"
  shell "git tag ${tag}"
  println "> git push origin ${tag}"
  shell "git push origin ${tag}"
  shell "git push origin master"
}
